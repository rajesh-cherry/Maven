# what do you learn here
1. Activities of a DevOps engineer Maven
2. Build Project of maven
3. Setup and Integration of maven with jenkins

# Topics covered 
# Section : Intoduction
1. What is Maven
2. How Maven helps to a DevOps Engineer
3. Resources

# Section : Maven With Linux
1. Prepare Maven server
2. Setup maven on Linux
3. Build maven project on Linux
4. commonly used maven goals
5. create a project with maven archetype
6. settings.xml
7. Deploy an application maven server

# Section : Maven in DevOps workflow
1. setup jenkins server 
2. Add Maven server as a agent to jenkins
3. Build a java project on agent (maven seerver)


what is maven?
Maven is a software project management and comprehension tool. Based on the concept of a project object model (POM), Maven can manage a project build, reporting and documentation from a central piece of information

Day to Day activity of a typical developer 

Developer Activities
1. Write code in favourite IDE (visualcode)
2. compile the code locally
3. Test it
4. create a package
5. Deploy it local on application server (incase if he has a local application server just to validate his code working on his system) once done 
6. push the working code in source code repository


But the challenge over here is while writing his application code or while working on project  its a quite common behaviour that we use a some third party librarys or packages, so whenever you compile test and create a package, we need to make sure that all the relevant packages are available to build our code, otherwise it doesnt work right.

as a developer i need to manually download all the package, which are required to run my application.
lets assume that i have downloaded and i compiled it and its working properly and i can able to deploy it, but the problem here is (pushing the code into source code repository) i cannot push the all package into source code repository, right

the name itself it is saying that source code management like github or bitbucket, it is maintain only source code,
we dont push all the third party libraries ok

some other want to compile it and deploy into some other systems, how does it possible it is difficult right,?

# lets assume that u have given packages apart of the source code 

the other team members or other party's or even i can say devops engineer could able to build it and deploy it

after some period of time u developing few other features where u can pull the latest library or third part packages into your application , again it become a problem that   you need to download the latest packages onto your local system, while doing test and also u need provide same packages to the people whoever using this code its quite difficult problem right,?
 instead of that one how it will be if i  give a single file, which tells about whats the package's are required and what are the libraries are required to run this application and that file itself can identify and download those packages.,? yes 
 thats where maven come into the picture 

maven can able to download all the third party libraries which are required for your application and it also do the  compilation, test and even deployment of the application 
not only that if theres any update in the third-party libraries or packages which we are using then you just need to update that file, it automatically download whenever you are compile or testing our code its good right?

so maven can help us that build your application with the all required packages with the minimal efforts, sharing only source code for the community or the people whoever want use your application along with the file which mentions that what libraries does it required that file we can call it as # POM.XML

Maven can helps a developer to build, test, deploy code efficiently 
compile the code , downloading all the dependencies, building the code and packaging the code

# How does it work at devops engineer level

once developer is tested his code and if its working fine obviously he need to check-in his code to github (source code management)
once code is pushed to github, as a devops engineer again we need to take the code, we need to build the artifacts from it right?
artifacts nothing but output of the source code

when ever we doing that (build ),even  we need to know the dependencies does it require once you have taken that dependencies
we need to build it, once u build it we need to run the unit test cases, once its done we can use it as deployment as well.

who will do all the things? so, here maven comes into the picture
 
Maven helps even at devops environment level to download dependencies, build test and deploy the applications

whenever we working at developer level, using maven with eclipse
1. install eclipse in local (laptop)
2. write a sample java application code (not writing any complicated code we can get some templates, am using that templates) and see how a developer going to use maven, then with the help of that as a devops engineer what can do at the devops engineer level

Before starting lets see some 
# Prerequisties
1. Linux Basics
2. Git Basics
3. AWS EC2 services

# Resources
1. AWS account
2. Github Account

# section : Prepare Maven environment on windows
1. install java
2. install eclipse (eclipse is mostly used IDE tool for java)
3. create a 1st  maven project (by using eclipse)
4. maven co-ordinates (while building maven project it ask some co-ordinates)
5. Default directory structure'
6. steps involved in building a java project
7. maven goals
8. build frst maven project

first we need to download java and eclipse, without java its possible not execute our maven commands and eclipse

1. install java (https://www.oracle.com/java/technologies/javase/jdk17-archive-downloads.html) for windows
2. setup java environment variable to make it work across the system in environment variables 
 paste the path in system variable C:\Program Files\java\jdk-11\bin
 and create a new variable for java for that we dont need to copy bin 
 JAVA_HOME & C:\Program Files\java\jdk-11

3. Install EClipse (EClipse is one of the widely used IDE tool for the java developers)
They will write their code compile it and deploy by using Eclipse with multiple Plugins
from here we can install eclipse (https://www.eclipse.org/downloads/)

4. create a 1st maven project with the help of archetype 

what is archetype?
Archetype is maven project templating tool kit. (which means that its like a template which comes with default directory structure as well as some default application with that application we can do our changes its like a some example project )
An Archetype is defined as an original pattern or model from which all other things of the same kind are made. The Name file as we are trying to provide a system that provide consitent means of generating maven projects.


usually maven goals are defined as the build lifecycle format

Maven Goals are set in the build lifecycle format we need to choose the right goal for our project

# Maven Goals

Goals are divided in to three different build life cycle
1. default lifecycle
2. clean lifecycle
3. site lifecycle

# Important build life cycle commonly used :
Clean - remove all files generated by previous Build
Validate - validate the project is correct and all necessary information is available
Compile - compile the source code of the project
test-compile - compile the test source code into the destination directory
test - run tests using a suitable unit testing framework
package - take the compiled code and package it in its distributable format, such as JAR.
verify - run any checks to verify the package is valid and meets quality criteria.
install  - install the package into local repository, for use as dependency in other projects locally
deploy - copies the final package to the remote repository for sharing with other projects.
